package com.mycompany.myapp;


import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.notifications.LocalNotificationCallback;
import com.mycompany.entites.Avis;
import com.mycompany.entities.fosUser.Utilisateur;
import com.mycompany.gui.AjoutParentForm;
import com.mycompany.gui.AvisForm;
import com.mycompany.gui.ListAvisForm;
import com.mycompany.gui.ListEventsForm;
import com.mycompany.gui.ListParentForm;
import com.mycompany.gui.LocalNotificationTest;
import com.mycompany.gui.ReservationForm;
import com.mycompany.myapp.gui.login.login;
import com.mycompany.services.ServiceParent;
import java.util.ArrayList;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
   // public static Utilisateur user = null;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        }); 
        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
           new login(theme).show();

          //  new ReservationForm().show();
              //new ListAvisForm().show();
             // new ListParentForm().show();
         //new AjoutParentForm().show();
              //new AvisForm().show();
       // new ListEventsForm(theme).show();
             // new LocalNotificationTest().start();
         //new ListParentForm().show();
   }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

    
 
}
